package com.github.thushear.test;

import java.io.Serializable;
import java.lang.reflect.Method;
import net.sf.cglib.core.ReflectUtils;
import net.sf.cglib.core.Signature;
import net.sf.cglib.proxy.Callback;
import net.sf.cglib.proxy.Factory;
import net.sf.cglib.proxy.InvocationHandler;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;

public class EchoService$$EnhancerByCGLIB$$62d930b1
        implements EchoService, Serializable, Factory
{
    private boolean CGLIB$BOUND;
    private static final ThreadLocal CGLIB$THREAD_CALLBACKS;
    private static final Callback[] CGLIB$STATIC_CALLBACKS;
    private InvocationHandler CGLIB$CALLBACK_0;
    private MethodInterceptor CGLIB$CALLBACK_1;
    private MethodInterceptor CGLIB$CALLBACK_2;
    private static final Method CGLIB$finalize$0;
    private static final Method CGLIB$toString$2;
    private static final Method CGLIB$clone$4;
    private static final Method CGLIB$echo$5;
    private static final Method CGLIB$equals$1$Method;
    private static final MethodProxy CGLIB$equals$1$Proxy;
    private static final Object[] CGLIB$emptyArgs;
    private static final Method CGLIB$hashCode$3$Method;
    private static final MethodProxy CGLIB$hashCode$3$Proxy;

    static void CGLIB$STATICHOOK1()
    {
        CGLIB$THREAD_CALLBACKS = new ThreadLocal();
        CGLIB$finalize$0 = Class.forName("java.lang.Object").getDeclaredMethod("finalize", new Class[0]);
        CGLIB$toString$2 = Class.forName("java.lang.Object").getDeclaredMethod("toString", new Class[0]);
        CGLIB$clone$4 = Class.forName("java.lang.Object").getDeclaredMethod("clone", new Class[0]);
        CGLIB$echo$5 = Class.forName("com.github.thushear.test.EchoService").getDeclaredMethod("echo", new Class[] { Class.forName("java.lang.String") });
        CGLIB$emptyArgs = new Object[0];
        Class localClass1 = Class.forName("com.github.thushear.test.EchoService$$EnhancerByCGLIB$$62d930b1");
        Class localClass2;
        Method[] tmp136_133 = ReflectUtils.findMethods(new String[] { "equals", "(Ljava/lang/Object;)Z", "hashCode", "()I" }, (localClass2 = Class.forName("java.lang.Object")).getDeclaredMethods());
        CGLIB$equals$1$Method = tmp136_133[0];
        CGLIB$equals$1$Proxy = MethodProxy.create(localClass2, localClass1, "(Ljava/lang/Object;)Z", "equals", "CGLIB$equals$1");
        Method[] tmp156_136 = tmp136_133;
        CGLIB$hashCode$3$Method = tmp156_136[1];
        CGLIB$hashCode$3$Proxy = MethodProxy.create(localClass2, localClass1, "()I", "hashCode", "CGLIB$hashCode$3");
        tmp156_136;
        return;
    }

    protected final void finalize()
            throws Throwable
    {
        InvocationHandler tmp4_1 = this.CGLIB$CALLBACK_0;
        if (tmp4_1 == null)
        {
            tmp4_1;
            CGLIB$BIND_CALLBACKS(this);
        }
    }

    // ERROR //
    public final String toString()
    {
        // Byte code:
        //   0: aload_0
        //   1: getfield 38	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$CALLBACK_0	Lnet/sf/cglib/proxy/InvocationHandler;
        //   4: dup
        //   5: ifnonnull +12 -> 17
        //   8: pop
        //   9: aload_0
        //   10: invokestatic 42	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$BIND_CALLBACKS	(Ljava/lang/Object;)V
        //   13: aload_0
        //   14: getfield 38	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$CALLBACK_0	Lnet/sf/cglib/proxy/InvocationHandler;
        //   17: aload_0
        //   18: getstatic 55	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$toString$2	Ljava/lang/reflect/Method;
        //   21: iconst_0
        //   22: anewarray 4	java/lang/Object
        //   25: invokeinterface 50 4 0
        //   30: checkcast 57	java/lang/String
        //   33: areturn
        //   34: athrow
        //   35: new 63	net/sf/cglib/proxy/UndeclaredThrowableException
        //   38: dup_x1
        //   39: swap
        //   40: invokespecial 66	net/sf/cglib/proxy/UndeclaredThrowableException:<init>	(Ljava/lang/Throwable;)V
        //   43: athrow
        //
        // Exception table:
        //   from	to	target	type
        //   0	34	34	java/lang/RuntimeException
        //   0	34	34	java/lang/Error
        //   0	34	35	java/lang/Throwable
    }

    // ERROR //
    protected final Object clone()
            throws java.lang.CloneNotSupportedException
    {
        // Byte code:
        //   0: aload_0
        //   1: getfield 38	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$CALLBACK_0	Lnet/sf/cglib/proxy/InvocationHandler;
        //   4: dup
        //   5: ifnonnull +12 -> 17
        //   8: pop
        //   9: aload_0
        //   10: invokestatic 42	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$BIND_CALLBACKS	(Ljava/lang/Object;)V
        //   13: aload_0
        //   14: getfield 38	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$CALLBACK_0	Lnet/sf/cglib/proxy/InvocationHandler;
        //   17: aload_0
        //   18: getstatic 73	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$clone$4	Ljava/lang/reflect/Method;
        //   21: iconst_0
        //   22: anewarray 4	java/lang/Object
        //   25: invokeinterface 50 4 0
        //   30: areturn
        //   31: athrow
        //   32: new 63	net/sf/cglib/proxy/UndeclaredThrowableException
        //   35: dup_x1
        //   36: swap
        //   37: invokespecial 66	net/sf/cglib/proxy/UndeclaredThrowableException:<init>	(Ljava/lang/Throwable;)V
        //   40: athrow
        //
        // Exception table:
        //   from	to	target	type
        //   0	31	31	java/lang/RuntimeException
        //   0	31	31	java/lang/Error
        //   0	31	31	java/lang/CloneNotSupportedException
        //   0	31	32	java/lang/Throwable
    }

    // ERROR //
    public final String echo(String paramString)
    {
        // Byte code:
        //   0: aload_0
        //   1: getfield 38	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$CALLBACK_0	Lnet/sf/cglib/proxy/InvocationHandler;
        //   4: dup
        //   5: ifnonnull +12 -> 17
        //   8: pop
        //   9: aload_0
        //   10: invokestatic 42	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$BIND_CALLBACKS	(Ljava/lang/Object;)V
        //   13: aload_0
        //   14: getfield 38	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$CALLBACK_0	Lnet/sf/cglib/proxy/InvocationHandler;
        //   17: aload_0
        //   18: getstatic 78	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$echo$5	Ljava/lang/reflect/Method;
        //   21: iconst_1
        //   22: anewarray 4	java/lang/Object
        //   25: dup
        //   26: iconst_0
        //   27: aload_1
        //   28: aastore
        //   29: invokeinterface 50 4 0
        //   34: checkcast 57	java/lang/String
        //   37: areturn
        //   38: athrow
        //   39: new 63	net/sf/cglib/proxy/UndeclaredThrowableException
        //   42: dup_x1
        //   43: swap
        //   44: invokespecial 66	net/sf/cglib/proxy/UndeclaredThrowableException:<init>	(Ljava/lang/Throwable;)V
        //   47: athrow
        //
        // Exception table:
        //   from	to	target	type
        //   0	38	38	java/lang/RuntimeException
        //   0	38	38	java/lang/Error
        //   0	38	39	java/lang/Throwable
    }

    final boolean CGLIB$equals$1(Object paramObject)
    {
        return super.equals(paramObject);
    }

    public final boolean equals(Object paramObject)
    {
        MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_1;
        if (tmp4_1 == null)
        {
            tmp4_1;
            CGLIB$BIND_CALLBACKS(this);
        }
        MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_1;
        if (tmp17_14 != null)
        {
            Object tmp41_36 = tmp17_14.intercept(this, CGLIB$equals$1$Method, new Object[] { paramObject }, CGLIB$equals$1$Proxy);
            tmp41_36;
            return tmp41_36 == null ? false : ((Boolean)tmp41_36).booleanValue();
        }
        return super.equals(paramObject);
    }

    final int CGLIB$hashCode$3()
    {
        return super.hashCode();
    }

    public final int hashCode()
    {
        MethodInterceptor tmp4_1 = this.CGLIB$CALLBACK_2;
        if (tmp4_1 == null)
        {
            tmp4_1;
            CGLIB$BIND_CALLBACKS(this);
        }
        MethodInterceptor tmp17_14 = this.CGLIB$CALLBACK_2;
        if (tmp17_14 != null)
        {
            Object tmp36_31 = tmp17_14.intercept(this, CGLIB$hashCode$3$Method, CGLIB$emptyArgs, CGLIB$hashCode$3$Proxy);
            tmp36_31;
            return tmp36_31 == null ? 0 : ((Number)tmp36_31).intValue();
        }
        return super.hashCode();
    }

    public static MethodProxy CGLIB$findMethodProxy(Signature paramSignature)
    {
        String tmp4_1 = paramSignature.toString();
        switch (tmp4_1.hashCode())
        {
            case 1826985398:
                if (tmp4_1.equals("equals(Ljava/lang/Object;)Z"))
                    return CGLIB$equals$1$Proxy;
                break;
            case 1984935277:
        }
    }

    public EchoService$$EnhancerByCGLIB$$62d930b1()
    {
        CGLIB$BIND_CALLBACKS(this);
    }

    public static void CGLIB$SET_THREAD_CALLBACKS(Callback[] paramArrayOfCallback)
    {
        CGLIB$THREAD_CALLBACKS.set(paramArrayOfCallback);
    }

    public static void CGLIB$SET_STATIC_CALLBACKS(Callback[] paramArrayOfCallback)
    {
        CGLIB$STATIC_CALLBACKS = paramArrayOfCallback;
    }

    private static final void CGLIB$BIND_CALLBACKS(Object paramObject)
    {
        // Byte code:
        //   0: aload_0
        //   1: checkcast 2	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1
        //   4: astore_1
        //   5: aload_1
        //   6: getfield 189	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$BOUND	Z
        //   9: ifne +61 -> 70
        //   12: aload_1
        //   13: iconst_1
        //   14: putfield 189	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$BOUND	Z
        //   17: getstatic 31	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$THREAD_CALLBACKS	Ljava/lang/ThreadLocal;
        //   20: invokevirtual 192	java/lang/ThreadLocal:get	()Ljava/lang/Object;
        //   23: dup
        //   24: ifnonnull +15 -> 39
        //   27: pop
        //   28: getstatic 187	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$STATIC_CALLBACKS	[Lnet/sf/cglib/proxy/Callback;
        //   31: dup
        //   32: ifnonnull +7 -> 39
        //   35: pop
        //   36: goto +34 -> 70
        //   39: checkcast 193	[Lnet/sf/cglib/proxy/Callback;
        //   42: aload_1
        //   43: swap
        //   44: dup2
        //   45: iconst_2
        //   46: aaload
        //   47: checkcast 116	net/sf/cglib/proxy/MethodInterceptor
        //   50: putfield 135	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$CALLBACK_2	Lnet/sf/cglib/proxy/MethodInterceptor;
        //   53: dup2
        //   54: iconst_1
        //   55: aaload
        //   56: checkcast 116	net/sf/cglib/proxy/MethodInterceptor
        //   59: putfield 110	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$CALLBACK_1	Lnet/sf/cglib/proxy/MethodInterceptor;
        //   62: iconst_0
        //   63: aaload
        //   64: checkcast 46	net/sf/cglib/proxy/InvocationHandler
        //   67: putfield 38	com/github/thushear/test/EchoService$$EnhancerByCGLIB$$62d930b1:CGLIB$CALLBACK_0	Lnet/sf/cglib/proxy/InvocationHandler;
        //   70: return
    }

    public Object newInstance(Callback[] paramArrayOfCallback)
    {
        CGLIB$SET_THREAD_CALLBACKS(paramArrayOfCallback);
        CGLIB$SET_THREAD_CALLBACKS(null);
        return new 62d930b1();
    }

    public Object newInstance(Callback paramCallback)
    {
        throw new IllegalStateException("More than one callback object required");
        CGLIB$SET_THREAD_CALLBACKS(null);
        return new 62d930b1();
    }

    public Object newInstance(Class[] paramArrayOfClass, Object[] paramArrayOfObject, Callback[] paramArrayOfCallback)
    {
        CGLIB$SET_THREAD_CALLBACKS(paramArrayOfCallback);
        Class[] tmp9_8 = paramArrayOfClass;
        switch (tmp9_8.length)
        {
            case 0:
                tmp9_8;
                break;
            default:
                new 62d930b1();
                throw new IllegalArgumentException("Constructor not found");
        }
        CGLIB$SET_THREAD_CALLBACKS(null);
    }

    public Callback getCallback(int paramInt)
    {
        CGLIB$BIND_CALLBACKS(this);
        switch (paramInt)
        {
            case 0:
                break;
            case 1:
                break;
            case 2:
                break;
        }
        return null;
    }

    public void setCallback(int paramInt, Callback paramCallback)
    {
        switch (paramInt)
        {
            case 0:
                this.CGLIB$CALLBACK_0 = ((InvocationHandler)paramCallback);
                break;
            case 1:
                this.CGLIB$CALLBACK_1 = ((MethodInterceptor)paramCallback);
                break;
            case 2:
                this.CGLIB$CALLBACK_2 = ((MethodInterceptor)paramCallback);
                break;
        }
    }

    public Callback[] getCallbacks()
    {
        CGLIB$BIND_CALLBACKS(this);
        return new Callback[] { this.CGLIB$CALLBACK_0, this.CGLIB$CALLBACK_1, this.CGLIB$CALLBACK_2 };
    }

    public void setCallbacks(Callback[] paramArrayOfCallback)
    {
        Callback[] tmp2_1 = paramArrayOfCallback;
        this.CGLIB$CALLBACK_0 = ((InvocationHandler)tmp2_1[0]);
        Callback[] tmp11_2 = tmp2_1;
        this.CGLIB$CALLBACK_1 = ((MethodInterceptor)tmp11_2[1]);
        this.CGLIB$CALLBACK_2 = ((MethodInterceptor)tmp11_2[2]);
    }

    static
    {
        CGLIB$STATICHOOK1();
    }
}